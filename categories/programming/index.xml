<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on Blog</title><link>/categories/programming/</link><description>Recent content in programming on Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 26 Aug 2018 00:00:00 +0530</lastBuildDate><atom:link href="/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Bootstrapping your vimrc</title><link>/2018/bootstrapping-your-vimrc/</link><pubDate>Sun, 26 Aug 2018 00:00:00 +0530</pubDate><guid>/2018/bootstrapping-your-vimrc/</guid><description>When I first started with vim, I had trouble understanding how vim configuration worked and it was hard for me to use the plain vim. So I had to copy the .vimrc of a friend and as time moved, I kept adding over it to a point where my vim started slowing down. So, last week I spent some time on rewriting my .vimrc from scratch and I made another &amp;ldquo;light-weight&amp;rdquo; version of .</description></item><item><title>Concurrency and Parallelelism</title><link>/2018/concurrency-and-parallelism/</link><pubDate>Mon, 30 Jul 2018 00:00:00 +0530</pubDate><guid>/2018/concurrency-and-parallelism/</guid><description>We live in a universe where literally every system can multiprocess (Some claim that the universe itself is a parallel system but I&amp;rsquo;m going to leave that for another blog) but most of our programs are sequential. This is mainly because parallel systems are arduous to design.
Concurrent systems grow in complexity exponentially because the more concurrent the system gets, more the places it could fail. Handling for all the failable cases is what makes concurrent design laborious.</description></item><item><title>My day 1 of learning Kotlin</title><link>/2017/my-day-1-with-kotlin/</link><pubDate>Sun, 21 May 2017 05:00:00 +0530</pubDate><guid>/2017/my-day-1-with-kotlin/</guid><description>I was reluctant to learn Android until now because of Java. With all the new languages out there, Java&amp;rsquo;s verbose nature and lack of syntactic sugar is not the most pleasing language to code in. Even though language alternatives like Scala, Clojure, and Kotlin exist for Android, I stuck with hybrid app development due to the lack of proper documentation for these alternatives.
A couple of days back, the Android team announced first-class support for kotlin and I started seeing a lot of Kotlin praise and tutorial coming up across the internet community.</description></item><item><title>Web Scraping 101 (part 2): Build an Anna University Result Scraper</title><link>/2017/web-scraping-101-part2/</link><pubDate>Sat, 14 Jan 2017 02:51:00 +0530</pubDate><guid>/2017/web-scraping-101-part2/</guid><description>This is the follow-up to Web Scraping 101: Build a simple web scraper using PHP. If you haven&amp;rsquo;t seen it yet, I&amp;rsquo;d highly recommend you to read that before continuing.
In this tutorial, we will be building a simple web scraper that extracts the result from Anna University&amp;rsquo;s website. This tutorial is strictly for educational purposes.
AU Scraper We are going to do this in 4 simple steps:
Step 1: read the website and create the DOM Anna University provides a nice little endpoint using which we can view our result by sending a GET Request.</description></item><item><title>Web Scraping 101 : Build a simple web scraper using PHP</title><link>/2017/web-scraping-101/</link><pubDate>Fri, 13 Jan 2017 12:48:00 +0530</pubDate><guid>/2017/web-scraping-101/</guid><description>There are times when we want to extract data from a website. In most cases, you are provided with an API, but that&amp;rsquo;s not always plausible. So, when a website does not provide an API, the only way to get the data from the website is to scrape it off yourself.
In this tutorial, we are going to build a simple scraper using PHP to extract data from Wikipedia (I&amp;rsquo;d highly recommend you to use Wikipedia API over this.</description></item><item><title>Hello World</title><link>/2016/hello-world/</link><pubDate>Thu, 08 Dec 2016 13:50:00 +0530</pubDate><guid>/2016/hello-world/</guid><description>This is my first blog. Here&amp;rsquo;s a line of python to generate an asterisk triangle:
&amp;gt;&amp;gt;&amp;gt; print(&amp;#34;\n&amp;#34;.join([&amp;#34;*&amp;#34; * i for i in range(int(input()) + 1)])) 5 * ** *** **** *****</description></item></channel></rss>