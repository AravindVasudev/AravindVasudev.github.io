<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Blog</title><link>/categories/programming/</link><description>Recent content in Programming on Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 31 Aug 2024 00:00:00 +0530</lastBuildDate><atom:link href="/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>My Tech Interviewing Checklist</title><link>/misc/tech-interviewing-checklist/</link><pubDate>Sat, 31 Aug 2024 00:00:00 +0530</pubDate><guid>/misc/tech-interviewing-checklist/</guid><description>&lt;p>&lt;em>Disclaimer: This article is basically a dump of my disorganized notes I took during my interview prep, don&amp;rsquo;t expect it to be good.&lt;/em>&lt;/p>
&lt;p>Preparing for coding interviews definitely gets our nerves rattling, even if we’ve been coding for years. No matter how seasoned you are, the pressure of interviews can still be overwhelming.&lt;/p>
&lt;p>Before my Google interview, a friend pointed me to the blog &lt;a href="https://steve-yegge.blogspot.com/2008/03/get-that-job-at-google.html">Get that job at Google&lt;/a>. The author introduces the concept of the &amp;ldquo;Interview Anti-Loop&amp;rdquo; which really stuck with me. It’s basically the idea that, no matter how prepared you are, there will always be someone who thinks you’re not the right fit or a problem you can’t solve on the spot.&lt;/p></description></item><item><title>Recursion, Graphs, and Dynamic Programming</title><link>/2024/recursion-graphs-and-dp/</link><pubDate>Sun, 11 Feb 2024 00:00:00 +0530</pubDate><guid>/2024/recursion-graphs-and-dp/</guid><description>&lt;p>This write-up aims to connect graph theory with solving dynamic programming
problems. Instead of delving into the basics of these concepts, we will focus on
building an intuition for using these concepts. We will start by exploring the
idea behind recursion, followed by graphs, and finally wrap up with top-down
dynamic programming.&lt;/p>
&lt;h2 id="recursion">Recursion&lt;/h2>
&lt;blockquote>
&lt;p>Recursion is defining a problem in terms of itself.&lt;/p>&lt;/blockquote>
&lt;p>What does this even mean? We all would have seen the classic example of
generating the Nth fibonacci sequence using recursion:&lt;/p></description></item><item><title>Pinning Git Submodule To A Revision</title><link>/2023/pinning-git-submodule-to-a-revision/</link><pubDate>Wed, 18 Jan 2023 00:00:00 +0530</pubDate><guid>/2023/pinning-git-submodule-to-a-revision/</guid><description>&lt;p>This blog requires some understanding of git plumbing commands and the basics of
submodules. The resources below are a good start.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">Git Tools - Submodules&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain">Git Internals&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The submodules chapter within the git book is pretty extensive on how to use
git submodules. However, it misses covering some real-world details.&lt;/p>
&lt;p>Recently, I was working on pinning my submodule to a specific revision and
rolling that revision using a script. At first, this seems pretty
straightforward from the documentation. All the information about the
submodules are stored within the &lt;code>.gitmodules&lt;/code>, which itself is
version-controlled. However, looking deep into the
&lt;a href="https://git-scm.com/docs/gitmodules">structure of the &lt;code>.gitmodule&lt;/code> file&lt;/a>, you
would notice it barely stores any information about your submodule. What&amp;rsquo;s
going on here?&lt;/p></description></item><item><title>Solving Wordle</title><link>/2022/solving-wordle/</link><pubDate>Sun, 23 Jan 2022 00:00:00 +0530</pubDate><guid>/2022/solving-wordle/</guid><description>&lt;blockquote>
&lt;p>I started writing this article around January 2022 but never got around
publishing it. Given its September already, I&amp;rsquo;m going ahead and publishing the
draft. This is not intended to be read/shared but to just keep this blog going.&lt;/p>&lt;/blockquote>
&lt;p>I have been playing &lt;a href="https://www.powerlanguage.co.uk/wordle/">wordle&lt;/a>
continously for the past week with my colleagues. It&amp;rsquo;s a simple game where you
guess a five letter word within six chances. At each guess, the game tells you
how many letters you got right, how many letters are in the word in a different
position, and how many aren&amp;rsquo;t present in the answer. The game gives you a new
puzzle everyday. The game became so popular that even google added an easter
egg.&lt;/p></description></item><item><title>Bootstrapping your vimrc</title><link>/2018/bootstrapping-your-vimrc/</link><pubDate>Sun, 26 Aug 2018 00:00:00 +0530</pubDate><guid>/2018/bootstrapping-your-vimrc/</guid><description>&lt;p>When I first started with vim, I had trouble understanding how vim configuration worked
and it was hard for me to use the plain vim. So I had to copy the .vimrc of a friend
and as time moved, I kept adding over it to a point where my vim started
slowing down. So, last week I spent some time on rewriting my .vimrc from scratch and I
made another &amp;ldquo;light-weight&amp;rdquo; version of .vimrc and aliased to &amp;lsquo;vi&amp;rsquo; for minor editing in
my system and for using it in a colleague&amp;rsquo;s / ssh machine. I then realized that I&amp;rsquo;ve made
a perfect .vimrc for a novice to build upon. Here, I present to you my sexy and slim .vimrc:&lt;/p></description></item><item><title>Concurrency and Parallelelism</title><link>/2018/concurrency-and-parallelism/</link><pubDate>Mon, 30 Jul 2018 00:00:00 +0530</pubDate><guid>/2018/concurrency-and-parallelism/</guid><description>&lt;p>We live in a universe where literally every system can multiprocess (Some claim
that the universe itself is a parallel system but I&amp;rsquo;m going to leave
that for another blog) but most of our programs are sequential. This is mainly
because parallel systems are arduous to design.&lt;/p>
&lt;p>Concurrent systems grow in complexity exponentially because the more concurrent the
system gets, more the places it could fail. Handling for all the failable cases is
what makes concurrent design laborious. Moreover, many developers find it hard
to differentiate concurrency from parallelism.&lt;/p></description></item><item><title>My day 1 of learning Kotlin</title><link>/2017/my-day-1-with-kotlin/</link><pubDate>Sun, 21 May 2017 05:00:00 +0530</pubDate><guid>/2017/my-day-1-with-kotlin/</guid><description>&lt;p>I was reluctant to learn Android until now because of Java. With all the new
languages out there, Java&amp;rsquo;s verbose nature and lack of syntactic sugar is not the
most pleasing language to code in. Even though language alternatives like Scala,
Clojure, and Kotlin exist for Android, I stuck with hybrid app development due to
the lack of proper documentation for these alternatives.&lt;/p>
&lt;p>A couple of days back, the Android team announced first-class support for kotlin
and I started seeing a lot of Kotlin praise and tutorial coming up across the
internet community. I couldn&amp;rsquo;t care less about it until I came across these:&lt;/p></description></item><item><title>Web Scraping 101 (part 2): Build an Anna University Result Scraper</title><link>/2017/web-scraping-101-part2/</link><pubDate>Sat, 14 Jan 2017 02:51:00 +0530</pubDate><guid>/2017/web-scraping-101-part2/</guid><description>&lt;p>This is the follow-up to &lt;a href="../web-scraping-101/">Web Scraping 101: Build a simple web scraper using PHP&lt;/a>.
If you haven&amp;rsquo;t seen it yet, I&amp;rsquo;d highly recommend you to read that before continuing.&lt;/p>
&lt;p>In this tutorial, we will be building a simple web scraper that extracts the
result from Anna University&amp;rsquo;s website. This tutorial is strictly for educational
purposes.&lt;/p>
&lt;hr>
&lt;h2 id="au-scraper">AU Scraper&lt;/h2>
&lt;p>We are going to do this in 4 simple steps:&lt;/p>
&lt;h3 id="step-1-read-the-website-and-create-the-dom">Step 1: read the website and create the DOM&lt;/h3>
&lt;p>Anna University provides a nice little endpoint using which we can view our result
by sending a GET Request.&lt;/p></description></item><item><title>Web Scraping 101 : Build a simple web scraper using PHP</title><link>/2017/web-scraping-101/</link><pubDate>Fri, 13 Jan 2017 12:48:00 +0530</pubDate><guid>/2017/web-scraping-101/</guid><description>&lt;p>There are times when we want to extract data from a website. In most cases,
you are provided with an API, but that&amp;rsquo;s not always plausible. So, when a website
does not provide an API, the only way to get the data from the website is to scrape it off yourself.&lt;/p>
&lt;p>In this tutorial, we are going to build a simple scraper using PHP to extract data from Wikipedia
(I&amp;rsquo;d highly recommend you to use &lt;a href="https://www.mediawiki.org/wiki/API:Main_page">Wikipedia API&lt;/a> over this.
This is just for the tutorial purpose.) and another scraper that extracts
Anna University result.&lt;/p></description></item><item><title>Hello World</title><link>/2016/hello-world/</link><pubDate>Thu, 08 Dec 2016 13:50:00 +0530</pubDate><guid>/2016/hello-world/</guid><description>&lt;p>This is my first blog. Here&amp;rsquo;s a line of python to generate an asterisk triangle:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">join&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s2">&amp;#34;*&amp;#34;&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">input&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)]))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">**&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">***&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">****&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*****&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>