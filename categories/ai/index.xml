<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AI on Blog</title><link>/categories/ai/</link><description>Recent content in AI on Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 05 Apr 2018 04:00:00 +0530</lastBuildDate><atom:link href="/categories/ai/index.xml" rel="self" type="application/rss+xml"/><item><title>Hacking out an object detector using brain.js</title><link>/2018/hacking-out-an-object-detector-using-brainjs/</link><pubDate>Thu, 05 Apr 2018 04:00:00 +0530</pubDate><guid>/2018/hacking-out-an-object-detector-using-brainjs/</guid><description>&lt;p>Two weeks back, I had to demo my final year project which uses Deep Learning.
Being a novice myself, I know how difficult it is to wrap our minds around DL. So,
I wanted to build an intuitive demo with real-world applications which would help me
to explain my project. (The world has had enough MNIST classifiers!).&lt;/p>
&lt;p>I planned on building an object detector but also eschewed from &amp;ldquo;production-ready&amp;rdquo;
deep-learning frameworks because those are quite convoluted for a beginner to
understand. So after a lot of considerations, I picked
&lt;a href="https://github.com/BrainJS/brain.js">&lt;em>brain.js&lt;/em>&lt;/a>. Brain.js is a fork of an
older javascript neural network library, brain, which went unmaintained few years
back. It has a steep learning curve, easy to use, and runs on the browser.&lt;/p></description></item></channel></rss>