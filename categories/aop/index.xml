<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aop on Blog</title><link>/categories/aop/</link><description>Recent content in Aop on Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 30 Mar 2019 00:00:00 +0530</lastBuildDate><atom:link href="/categories/aop/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to Aspect Oriented Programming</title><link>/2019/introduction-to-aop/</link><pubDate>Sat, 30 Mar 2019 00:00:00 +0530</pubDate><guid>/2019/introduction-to-aop/</guid><description>&lt;p>In a medium to large codebase, many-a-time, you might notice code that shouldn&amp;rsquo;t be in some class/method by design but is necessary. This can be anything from simple logging to transaction handling. As the codebase scales, this keeps adding up to a point where the code becomes laborious to manage.&lt;/p>
&lt;p>&lt;img src="/images/blog/aop_1.png" alt="codebase on fire!">&lt;/p>
&lt;p>Aspect-Oriented Programming provides a way to modularize these kinds of cross-cutting concerns with &lt;em>Aspects&lt;/em>. Here is a basic example,&lt;/p></description></item></channel></rss>